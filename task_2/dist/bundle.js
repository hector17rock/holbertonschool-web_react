/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Director class implementing DirectorInterface
var Director = /** @class */ (function () {
    function Director() {
    }
    Director.prototype.workFromHome = function () {
        return "Working from home";
    };
    Director.prototype.getCoffeeBreak = function () {
        return "Getting a coffee break";
    };
    Director.prototype.workDirectorTasks = function () {
        return "Getting to director tasks";
    };
    return Director;
}());
// Teacher class implementing TeacherInterface
var Teacher = /** @class */ (function () {
    function Teacher() {
    }
    Teacher.prototype.workFromHome = function () {
        return "Cannot work from home";
    };
    Teacher.prototype.getCoffeeBreak = function () {
        return "Cannot have a break";
    };
    Teacher.prototype.workTeacherTasks = function () {
        return "Getting to work";
    };
    return Teacher;
}());
// createEmployee function that returns either Director or Teacher
function createEmployee(salary) {
    // If salary is a number and less than 500, return Teacher
    if (typeof salary === "number" && salary < 500) {
        return new Teacher();
    }
    // Otherwise return Director
    return new Director();
}
// Test examples as specified in the requirements
console.log(createEmployee(200)); // Should print Teacher instance
console.log(createEmployee(1000)); // Should print Director instance
console.log(createEmployee('$500')); // Should print Director instance
// Additional testing to demonstrate functionality
var employee1 = createEmployee(200);
console.log(employee1.workFromHome()); // "Cannot work from home"
console.log(employee1.getCoffeeBreak()); // "Cannot have a break"
var employee2 = createEmployee(1000);
console.log(employee2.workFromHome()); // "Working from home"
console.log(employee2.getCoffeeBreak()); // "Getting a coffee break"
var employee3 = createEmployee('$500');
console.log(employee3.workFromHome()); // "Working from home"
console.log(employee3.getCoffeeBreak()); // "Getting a coffee break"
// Type predicate function to check if employee is a Director
function isDirector(employee) {
    return employee.workDirectorTasks !== undefined;
}
// Function to execute work based on employee type
function executeWork(employee) {
    if (isDirector(employee)) {
        return employee.workDirectorTasks();
    }
    else {
        return employee.workTeacherTasks();
    }
}
// Test the functions as specified in the requirements
console.log(executeWork(createEmployee(200))); // Getting to work
console.log(executeWork(createEmployee(1000))); // Getting to director tasks
// Function to teach class based on subject
function teachClass(todayClass) {
    if (todayClass === 'Math') {
        return 'Teaching Math';
    }
    else {
        return 'Teaching History';
    }
}
// Test the teachClass function as specified in the requirements
console.log(teachClass('Math')); // Teaching Math
console.log(teachClass('History')); // Teaching History

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7QUFLNUUsMkNBQTJDO0FBQzNDLFNBQVMsVUFBVSxDQUFDLFVBQW9CO0lBQ3RDLElBQUksVUFBVSxLQUFLLE1BQU0sRUFBRTtRQUN6QixPQUFPLGVBQWUsQ0FBQztLQUN4QjtTQUFNO1FBQ0wsT0FBTyxrQkFBa0IsQ0FBQztLQUMzQjtBQUNILENBQUM7QUFFRCxnRUFBZ0U7QUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFJLGdCQUFnQjtBQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlwZXNjcmlwdF9kZXBlbmRlbmNpZXMvLi9qcy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERpcmVjdG9ySW50ZXJmYWNlIHdpdGggMyBleHBlY3RlZCBtZXRob2RzXG5pbnRlcmZhY2UgRGlyZWN0b3JJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nO1xuICBnZXRDb2ZmZWVCcmVhaygpOiBzdHJpbmc7XG4gIHdvcmtEaXJlY3RvclRhc2tzKCk6IHN0cmluZztcbn1cblxuLy8gVGVhY2hlckludGVyZmFjZSB3aXRoIDMgZXhwZWN0ZWQgbWV0aG9kc1xuaW50ZXJmYWNlIFRlYWNoZXJJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nO1xuICBnZXRDb2ZmZWVCcmVhaygpOiBzdHJpbmc7XG4gIHdvcmtUZWFjaGVyVGFza3MoKTogc3RyaW5nO1xufVxuXG4vLyBEaXJlY3RvciBjbGFzcyBpbXBsZW1lbnRpbmcgRGlyZWN0b3JJbnRlcmZhY2VcbmNsYXNzIERpcmVjdG9yIGltcGxlbWVudHMgRGlyZWN0b3JJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJXb3JraW5nIGZyb20gaG9tZVwiO1xuICB9XG5cbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJHZXR0aW5nIGEgY29mZmVlIGJyZWFrXCI7XG4gIH1cblxuICB3b3JrRGlyZWN0b3JUYXNrcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkdldHRpbmcgdG8gZGlyZWN0b3IgdGFza3NcIjtcbiAgfVxufVxuXG4vLyBUZWFjaGVyIGNsYXNzIGltcGxlbWVudGluZyBUZWFjaGVySW50ZXJmYWNlXG5jbGFzcyBUZWFjaGVyIGltcGxlbWVudHMgVGVhY2hlckludGVyZmFjZSB7XG4gIHdvcmtGcm9tSG9tZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkNhbm5vdCB3b3JrIGZyb20gaG9tZVwiO1xuICB9XG5cbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJDYW5ub3QgaGF2ZSBhIGJyZWFrXCI7XG4gIH1cblxuICB3b3JrVGVhY2hlclRhc2tzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiR2V0dGluZyB0byB3b3JrXCI7XG4gIH1cbn1cblxuLy8gY3JlYXRlRW1wbG95ZWUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlciBEaXJlY3RvciBvciBUZWFjaGVyXG5mdW5jdGlvbiBjcmVhdGVFbXBsb3llZShzYWxhcnk6IG51bWJlciB8IHN0cmluZyk6IERpcmVjdG9yIHwgVGVhY2hlciB7XG4gIC8vIElmIHNhbGFyeSBpcyBhIG51bWJlciBhbmQgbGVzcyB0aGFuIDUwMCwgcmV0dXJuIFRlYWNoZXJcbiAgaWYgKHR5cGVvZiBzYWxhcnkgPT09IFwibnVtYmVyXCIgJiYgc2FsYXJ5IDwgNTAwKSB7XG4gICAgcmV0dXJuIG5ldyBUZWFjaGVyKCk7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIHJldHVybiBEaXJlY3RvclxuICByZXR1cm4gbmV3IERpcmVjdG9yKCk7XG59XG5cbi8vIFRlc3QgZXhhbXBsZXMgYXMgc3BlY2lmaWVkIGluIHRoZSByZXF1aXJlbWVudHNcbmNvbnNvbGUubG9nKGNyZWF0ZUVtcGxveWVlKDIwMCkpOyAgIC8vIFNob3VsZCBwcmludCBUZWFjaGVyIGluc3RhbmNlXG5jb25zb2xlLmxvZyhjcmVhdGVFbXBsb3llZSgxMDAwKSk7ICAvLyBTaG91bGQgcHJpbnQgRGlyZWN0b3IgaW5zdGFuY2VcbmNvbnNvbGUubG9nKGNyZWF0ZUVtcGxveWVlKCckNTAwJykpOyAvLyBTaG91bGQgcHJpbnQgRGlyZWN0b3IgaW5zdGFuY2VcblxuLy8gQWRkaXRpb25hbCB0ZXN0aW5nIHRvIGRlbW9uc3RyYXRlIGZ1bmN0aW9uYWxpdHlcbmNvbnN0IGVtcGxveWVlMSA9IGNyZWF0ZUVtcGxveWVlKDIwMCk7XG5jb25zb2xlLmxvZyhlbXBsb3llZTEud29ya0Zyb21Ib21lKCkpOyAvLyBcIkNhbm5vdCB3b3JrIGZyb20gaG9tZVwiXG5jb25zb2xlLmxvZyhlbXBsb3llZTEuZ2V0Q29mZmVlQnJlYWsoKSk7IC8vIFwiQ2Fubm90IGhhdmUgYSBicmVha1wiXG5cbmNvbnN0IGVtcGxveWVlMiA9IGNyZWF0ZUVtcGxveWVlKDEwMDApO1xuY29uc29sZS5sb2coZW1wbG95ZWUyLndvcmtGcm9tSG9tZSgpKTsgLy8gXCJXb3JraW5nIGZyb20gaG9tZVwiXG5jb25zb2xlLmxvZyhlbXBsb3llZTIuZ2V0Q29mZmVlQnJlYWsoKSk7IC8vIFwiR2V0dGluZyBhIGNvZmZlZSBicmVha1wiXG5cbmNvbnN0IGVtcGxveWVlMyA9IGNyZWF0ZUVtcGxveWVlKCckNTAwJyk7XG5jb25zb2xlLmxvZyhlbXBsb3llZTMud29ya0Zyb21Ib21lKCkpOyAvLyBcIldvcmtpbmcgZnJvbSBob21lXCJcbmNvbnNvbGUubG9nKGVtcGxveWVlMy5nZXRDb2ZmZWVCcmVhaygpKTsgLy8gXCJHZXR0aW5nIGEgY29mZmVlIGJyZWFrXCJcblxuLy8gVHlwZSBwcmVkaWNhdGUgZnVuY3Rpb24gdG8gY2hlY2sgaWYgZW1wbG95ZWUgaXMgYSBEaXJlY3RvclxuZnVuY3Rpb24gaXNEaXJlY3RvcihlbXBsb3llZTogRGlyZWN0b3IgfCBUZWFjaGVyKTogZW1wbG95ZWUgaXMgRGlyZWN0b3Ige1xuICByZXR1cm4gKGVtcGxveWVlIGFzIERpcmVjdG9yKS53b3JrRGlyZWN0b3JUYXNrcyAhPT0gdW5kZWZpbmVkO1xufVxuXG4vLyBGdW5jdGlvbiB0byBleGVjdXRlIHdvcmsgYmFzZWQgb24gZW1wbG95ZWUgdHlwZVxuZnVuY3Rpb24gZXhlY3V0ZVdvcmsoZW1wbG95ZWU6IERpcmVjdG9yIHwgVGVhY2hlcik6IHN0cmluZyB7XG4gIGlmIChpc0RpcmVjdG9yKGVtcGxveWVlKSkge1xuICAgIHJldHVybiBlbXBsb3llZS53b3JrRGlyZWN0b3JUYXNrcygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbXBsb3llZS53b3JrVGVhY2hlclRhc2tzKCk7XG4gIH1cbn1cblxuLy8gVGVzdCB0aGUgZnVuY3Rpb25zIGFzIHNwZWNpZmllZCBpbiB0aGUgcmVxdWlyZW1lbnRzXG5jb25zb2xlLmxvZyhleGVjdXRlV29yayhjcmVhdGVFbXBsb3llZSgyMDApKSk7ICAvLyBHZXR0aW5nIHRvIHdvcmtcbmNvbnNvbGUubG9nKGV4ZWN1dGVXb3JrKGNyZWF0ZUVtcGxveWVlKDEwMDApKSk7IC8vIEdldHRpbmcgdG8gZGlyZWN0b3IgdGFza3NcblxuLy8gU3RyaW5nIGxpdGVyYWwgdHlwZSBmb3IgU3ViamVjdHNcbnR5cGUgU3ViamVjdHMgPSAnTWF0aCcgfCAnSGlzdG9yeSc7XG5cbi8vIEZ1bmN0aW9uIHRvIHRlYWNoIGNsYXNzIGJhc2VkIG9uIHN1YmplY3RcbmZ1bmN0aW9uIHRlYWNoQ2xhc3ModG9kYXlDbGFzczogU3ViamVjdHMpOiBzdHJpbmcge1xuICBpZiAodG9kYXlDbGFzcyA9PT0gJ01hdGgnKSB7XG4gICAgcmV0dXJuICdUZWFjaGluZyBNYXRoJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ1RlYWNoaW5nIEhpc3RvcnknO1xuICB9XG59XG5cbi8vIFRlc3QgdGhlIHRlYWNoQ2xhc3MgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGluIHRoZSByZXF1aXJlbWVudHNcbmNvbnNvbGUubG9nKHRlYWNoQ2xhc3MoJ01hdGgnKSk7ICAgIC8vIFRlYWNoaW5nIE1hdGhcbmNvbnNvbGUubG9nKHRlYWNoQ2xhc3MoJ0hpc3RvcnknKSk7IC8vIFRlYWNoaW5nIEhpc3RvcnlcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==