/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Example usage as provided in the requirements
var teacher3 = {
    firstName: 'John',
    fullTimeEmployee: false,
    lastName: 'Doe',
    location: 'London',
    contract: false,
};
console.log(teacher3);
// Additional examples to demonstrate the interface flexibility
var teacher1 = {
    firstName: 'Alice',
    lastName: 'Johnson',
    fullTimeEmployee: true,
    yearsOfExperience: 5,
    location: 'New York',
    subject: 'Mathematics',
    salary: 75000
};
var teacher2 = {
    firstName: 'Bob',
    lastName: 'Smith',
    fullTimeEmployee: false,
    location: 'California',
    hourlyRate: 50,
    department: 'Science'
};
console.log(teacher1);
console.log(teacher2);
// Example usage as provided in the requirements
var director1 = {
    firstName: 'John',
    lastName: 'Doe',
    location: 'London',
    fullTimeEmployee: true,
    numberOfReports: 17,
};
console.log(director1);
// Implement the printTeacher function
var printTeacher = function (firstName, lastName) {
    return "".concat(firstName.charAt(0), ". ").concat(lastName);
};
// Example usage
console.log(printTeacher("John", "Doe")); // Should print: J. Doe
console.log(printTeacher("Alice", "Johnson")); // Should print: A. Johnson
console.log(printTeacher("Bob", "Smith")); // Should print: B. Smith
// StudentClass implementation
var StudentClass = /** @class */ (function () {
    function StudentClass(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    StudentClass.prototype.workOnHomework = function () {
        return "Currently working";
    };
    StudentClass.prototype.displayName = function () {
        return this.firstName;
    };
    return StudentClass;
}());
// Example usage
var student1 = new StudentClass("John", "Doe");
console.log(student1.displayName()); // Should print: John
console.log(student1.workOnHomework()); // Should print: Currently working
var student2 = new StudentClass("Alice", "Johnson");
console.log(student2.displayName()); // Should print: Alice
console.log(student2.workOnHomework()); // Should print: Currently working

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLHNCQUFzQjtBQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlwZXNjcmlwdF9kZXBlbmRlbmNpZXMvLi9qcy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERlZmluZSB0aGUgVGVhY2hlciBpbnRlcmZhY2VcbmludGVyZmFjZSBUZWFjaGVyIHtcbiAgcmVhZG9ubHkgZmlyc3ROYW1lOiBzdHJpbmc7ICAvLyBjYW4gb25seSBiZSBzZXQgZHVyaW5nIGluaXRpYWxpemF0aW9uXG4gIHJlYWRvbmx5IGxhc3ROYW1lOiBzdHJpbmc7ICAgLy8gY2FuIG9ubHkgYmUgc2V0IGR1cmluZyBpbml0aWFsaXphdGlvblxuICBmdWxsVGltZUVtcGxveWVlOiBib29sZWFuO1xuICB5ZWFyc09mRXhwZXJpZW5jZT86IG51bWJlcjsgIC8vIG9wdGlvbmFsIHByb3BlcnR5XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG4gIFtwcm9wTmFtZTogc3RyaW5nXTogYW55OyAgICAgLy8gaW5kZXggc2lnbmF0dXJlIHRvIGFsbG93IGFueSBhZGRpdGlvbmFsIHByb3BlcnRpZXNcbn1cblxuLy8gRXhhbXBsZSB1c2FnZSBhcyBwcm92aWRlZCBpbiB0aGUgcmVxdWlyZW1lbnRzXG5jb25zdCB0ZWFjaGVyMzogVGVhY2hlciA9IHtcbiAgZmlyc3ROYW1lOiAnSm9obicsXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IGZhbHNlLFxuICBsYXN0TmFtZTogJ0RvZScsXG4gIGxvY2F0aW9uOiAnTG9uZG9uJyxcbiAgY29udHJhY3Q6IGZhbHNlLFxufTtcblxuY29uc29sZS5sb2codGVhY2hlcjMpO1xuXG4vLyBBZGRpdGlvbmFsIGV4YW1wbGVzIHRvIGRlbW9uc3RyYXRlIHRoZSBpbnRlcmZhY2UgZmxleGliaWxpdHlcbmNvbnN0IHRlYWNoZXIxOiBUZWFjaGVyID0ge1xuICBmaXJzdE5hbWU6ICdBbGljZScsXG4gIGxhc3ROYW1lOiAnSm9obnNvbicsXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IHRydWUsXG4gIHllYXJzT2ZFeHBlcmllbmNlOiA1LFxuICBsb2NhdGlvbjogJ05ldyBZb3JrJyxcbiAgc3ViamVjdDogJ01hdGhlbWF0aWNzJyxcbiAgc2FsYXJ5OiA3NTAwMFxufTtcblxuY29uc3QgdGVhY2hlcjI6IFRlYWNoZXIgPSB7XG4gIGZpcnN0TmFtZTogJ0JvYicsXG4gIGxhc3ROYW1lOiAnU21pdGgnLFxuICBmdWxsVGltZUVtcGxveWVlOiBmYWxzZSxcbiAgbG9jYXRpb246ICdDYWxpZm9ybmlhJyxcbiAgaG91cmx5UmF0ZTogNTAsXG4gIGRlcGFydG1lbnQ6ICdTY2llbmNlJ1xufTtcblxuY29uc29sZS5sb2codGVhY2hlcjEpO1xuY29uc29sZS5sb2codGVhY2hlcjIpO1xuXG4vLyBEZWZpbmUgdGhlIERpcmVjdG9ycyBpbnRlcmZhY2UgdGhhdCBleHRlbmRzIFRlYWNoZXJcbmludGVyZmFjZSBEaXJlY3RvcnMgZXh0ZW5kcyBUZWFjaGVyIHtcbiAgbnVtYmVyT2ZSZXBvcnRzOiBudW1iZXI7XG59XG5cbi8vIEV4YW1wbGUgdXNhZ2UgYXMgcHJvdmlkZWQgaW4gdGhlIHJlcXVpcmVtZW50c1xuY29uc3QgZGlyZWN0b3IxOiBEaXJlY3RvcnMgPSB7XG4gIGZpcnN0TmFtZTogJ0pvaG4nLFxuICBsYXN0TmFtZTogJ0RvZScsXG4gIGxvY2F0aW9uOiAnTG9uZG9uJyxcbiAgZnVsbFRpbWVFbXBsb3llZTogdHJ1ZSxcbiAgbnVtYmVyT2ZSZXBvcnRzOiAxNyxcbn07XG5cbmNvbnNvbGUubG9nKGRpcmVjdG9yMSk7XG5cbi8vIERlZmluZSB0aGUgaW50ZXJmYWNlIGZvciB0aGUgcHJpbnRUZWFjaGVyIGZ1bmN0aW9uXG5pbnRlcmZhY2UgcHJpbnRUZWFjaGVyRnVuY3Rpb24ge1xuICAoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG59XG5cbi8vIEltcGxlbWVudCB0aGUgcHJpbnRUZWFjaGVyIGZ1bmN0aW9uXG5jb25zdCBwcmludFRlYWNoZXI6IHByaW50VGVhY2hlckZ1bmN0aW9uID0gKGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGAke2ZpcnN0TmFtZS5jaGFyQXQoMCl9LiAke2xhc3ROYW1lfWA7XG59O1xuXG4vLyBFeGFtcGxlIHVzYWdlXG5jb25zb2xlLmxvZyhwcmludFRlYWNoZXIoXCJKb2huXCIsIFwiRG9lXCIpKTsgLy8gU2hvdWxkIHByaW50OiBKLiBEb2VcbmNvbnNvbGUubG9nKHByaW50VGVhY2hlcihcIkFsaWNlXCIsIFwiSm9obnNvblwiKSk7IC8vIFNob3VsZCBwcmludDogQS4gSm9obnNvblxuY29uc29sZS5sb2cocHJpbnRUZWFjaGVyKFwiQm9iXCIsIFwiU21pdGhcIikpOyAvLyBTaG91bGQgcHJpbnQ6IEIuIFNtaXRoXG5cbi8vIEludGVyZmFjZSBmb3IgU3R1ZGVudENsYXNzIGNvbnN0cnVjdG9yXG5pbnRlcmZhY2UgU3R1ZGVudENvbnN0cnVjdG9yIHtcbiAgbmV3IChmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyk6IFN0dWRlbnRDbGFzc0ludGVyZmFjZTtcbn1cblxuLy8gSW50ZXJmYWNlIGZvciBTdHVkZW50Q2xhc3NcbmludGVyZmFjZSBTdHVkZW50Q2xhc3NJbnRlcmZhY2Uge1xuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lKCk6IHN0cmluZztcbn1cblxuLy8gU3R1ZGVudENsYXNzIGltcGxlbWVudGF0aW9uXG5jbGFzcyBTdHVkZW50Q2xhc3MgaW1wbGVtZW50cyBTdHVkZW50Q2xhc3NJbnRlcmZhY2Uge1xuICBwcml2YXRlIGZpcnN0TmFtZTogc3RyaW5nO1xuICBwcml2YXRlIGxhc3ROYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZpcnN0TmFtZSA9IGZpcnN0TmFtZTtcbiAgICB0aGlzLmxhc3ROYW1lID0gbGFzdE5hbWU7XG4gIH1cblxuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkN1cnJlbnRseSB3b3JraW5nXCI7XG4gIH1cblxuICBkaXNwbGF5TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpcnN0TmFtZTtcbiAgfVxufVxuXG4vLyBFeGFtcGxlIHVzYWdlXG5jb25zdCBzdHVkZW50MTogU3R1ZGVudENsYXNzSW50ZXJmYWNlID0gbmV3IFN0dWRlbnRDbGFzcyhcIkpvaG5cIiwgXCJEb2VcIik7XG5jb25zb2xlLmxvZyhzdHVkZW50MS5kaXNwbGF5TmFtZSgpKTsgLy8gU2hvdWxkIHByaW50OiBKb2huXG5jb25zb2xlLmxvZyhzdHVkZW50MS53b3JrT25Ib21ld29yaygpKTsgLy8gU2hvdWxkIHByaW50OiBDdXJyZW50bHkgd29ya2luZ1xuXG5jb25zdCBzdHVkZW50MjogU3R1ZGVudENsYXNzSW50ZXJmYWNlID0gbmV3IFN0dWRlbnRDbGFzcyhcIkFsaWNlXCIsIFwiSm9obnNvblwiKTtcbmNvbnNvbGUubG9nKHN0dWRlbnQyLmRpc3BsYXlOYW1lKCkpOyAvLyBTaG91bGQgcHJpbnQ6IEFsaWNlXG5jb25zb2xlLmxvZyhzdHVkZW50Mi53b3JrT25Ib21ld29yaygpKTsgLy8gU2hvdWxkIHByaW50OiBDdXJyZW50bHkgd29ya2luZ1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9